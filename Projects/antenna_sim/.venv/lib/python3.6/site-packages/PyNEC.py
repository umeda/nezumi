# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyNEC')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyNEC')
    _PyNEC = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyNEC', [dirname(__file__)])
        except ImportError:
            import _PyNEC
            return _PyNEC
        try:
            _mod = imp.load_module('_PyNEC', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyNEC = swig_import_helper()
    del swig_import_helper
else:
    import _PyNEC
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class nec_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_context, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyNEC.new_nec_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyNEC.delete_nec_context
    __del__ = lambda self: None

    def get_geometry(self):
        return _PyNEC.nec_context_get_geometry(self)

    def get_input_parameters(self, index):
        return _PyNEC.nec_context_get_input_parameters(self, index)

    def get_norm_rx_pattern(self, index):
        return _PyNEC.nec_context_get_norm_rx_pattern(self, index)

    def get_radiation_pattern(self, index):
        return _PyNEC.nec_context_get_radiation_pattern(self, index)

    def get_structure_excitation(self, index):
        return _PyNEC.nec_context_get_structure_excitation(self, index)

    def get_near_field_pattern(self, index):
        return _PyNEC.nec_context_get_near_field_pattern(self, index)

    def get_structure_currents(self, index):
        return _PyNEC.nec_context_get_structure_currents(self, index)

    def fr_card(self, ifrq, nfrq, freq_hz, del_freq):
        return _PyNEC.nec_context_fr_card(self, ifrq, nfrq, freq_hz, del_freq)

    def ld_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3):
        return _PyNEC.nec_context_ld_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3)

    def gn_card(self, ground_type, rad_wire_count, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
        return _PyNEC.nec_context_gn_card(self, ground_type, rad_wire_count, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)

    def gd_card(self, tmp1, tmp2, tmp3, tmp4):
        return _PyNEC.nec_context_gd_card(self, tmp1, tmp2, tmp3, tmp4)

    def geometry_complete(self, *args):
        return _PyNEC.nec_context_geometry_complete(self, *args)

    def ex_card(self, *args):
        return _PyNEC.nec_context_ex_card(self, *args)

    def tl_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
        return _PyNEC.nec_context_tl_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)

    def nt_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
        return _PyNEC.nec_context_nt_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)

    def xq_card(self, itmp1):
        return _PyNEC.nec_context_xq_card(self, itmp1)

    def rp_card(self, calc_mode, n_theta, n_phi, output_format, normalization, D, A, theta0, phi0, delta_theta, delta_phi, radial_distance, gain_norm):
        return _PyNEC.nec_context_rp_card(self, calc_mode, n_theta, n_phi, output_format, normalization, D, A, theta0, phi0, delta_theta, delta_phi, radial_distance, gain_norm)

    def pt_card(self, itmp1, itmp2, itmp3, itmp4):
        return _PyNEC.nec_context_pt_card(self, itmp1, itmp2, itmp3, itmp4)

    def pq_card(self, itmp1, itmp2, itmp3, itmp4):
        return _PyNEC.nec_context_pq_card(self, itmp1, itmp2, itmp3, itmp4)

    def kh_card(self, tmp1):
        return _PyNEC.nec_context_kh_card(self, tmp1)

    def ne_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
        return _PyNEC.nec_context_ne_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)

    def nh_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
        return _PyNEC.nec_context_nh_card(self, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)

    def set_extended_thin_wire_kernel(self, ekflag):
        return _PyNEC.nec_context_set_extended_thin_wire_kernel(self, ekflag)

    def cp_card(self, itmp1, itmp2, itmp3, itmp4):
        return _PyNEC.nec_context_cp_card(self, itmp1, itmp2, itmp3, itmp4)

    def pl_card(self, ploutput_filename, itmp1, itmp2, itmp3, itmp4):
        return _PyNEC.nec_context_pl_card(self, ploutput_filename, itmp1, itmp2, itmp3, itmp4)
nec_context_swigregister = _PyNEC.nec_context_swigregister
nec_context_swigregister(nec_context)

class c_geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_geometry, name)
    __repr__ = _swig_repr

    def wire(self, tag_id, segment_count, xw1, yw1, zw1, xw2, yw2, zw2, rad, rdel, rrad):
        return _PyNEC.c_geometry_wire(self, tag_id, segment_count, xw1, yw1, zw1, xw2, yw2, zw2, rad, rdel, rrad)

    def arc(self, tag_id, segment_count, rada, ang1, ang2, rad):
        return _PyNEC.c_geometry_arc(self, tag_id, segment_count, rada, ang1, ang2, rad)

    def helix(self, s, hl, a1, b1, a2, b2, rad, segment_count, tag_id):
        return _PyNEC.c_geometry_helix(self, s, hl, a1, b1, a2, b2, rad, segment_count, tag_id)

    def scale(self, xw1):
        return _PyNEC.c_geometry_scale(self, xw1)

    def reflect(self, ix, iy, iz, itx):
        return _PyNEC.c_geometry_reflect(self, ix, iy, iz, itx)

    def generate_cylindrical_structure(self, itx, nop):
        return _PyNEC.c_geometry_generate_cylindrical_structure(self, itx, nop)

    def sp_card(self, ns, in_x1, in_y1, in_z1, in_x2, in_y2, in_z2):
        return _PyNEC.c_geometry_sp_card(self, ns, in_x1, in_y1, in_z1, in_x2, in_y2, in_z2)

    def gx_card(self, card_int_1, card_int_2):
        return _PyNEC.c_geometry_gx_card(self, card_int_1, card_int_2)

    def move(self, rox_deg, roy_deg, roz_deg, xs, ys, zs, its, nrpt, itgi):
        return _PyNEC.c_geometry_move(self, rox_deg, roy_deg, roz_deg, xs, ys, zs, its, nrpt, itgi)

    def arbitrary_shaped_patch(self, ax1, ay1, az1, ax2_deg, ay2_deg, az2):
        return _PyNEC.c_geometry_arbitrary_shaped_patch(self, ax1, ay1, az1, ax2_deg, ay2_deg, az2)

    def rectangular_patch(self, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3):
        return _PyNEC.c_geometry_rectangular_patch(self, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3)

    def triangular_patch(self, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3):
        return _PyNEC.c_geometry_triangular_patch(self, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3)

    def quadrilateral_patch(self, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3, ax4, ay4, az4):
        return _PyNEC.c_geometry_quadrilateral_patch(self, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3, ax4, ay4, az4)

    def multiple_patch(self, nx, ny, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3, ax4, ay4, az4):
        return _PyNEC.c_geometry_multiple_patch(self, nx, ny, ax1, ay1, az1, ax2, ay2, az2, ax3, ay3, az3, ax4, ay4, az4)

    def __init__(self):
        this = _PyNEC.new_c_geometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyNEC.delete_c_geometry
    __del__ = lambda self: None
c_geometry_swigregister = _PyNEC.c_geometry_swigregister
c_geometry_swigregister(c_geometry)

class nec_radiation_pattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_radiation_pattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_radiation_pattern, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_frequency(self):
        return _PyNEC.nec_radiation_pattern_get_frequency(self)

    def get_ground(self):
        return _PyNEC.nec_radiation_pattern_get_ground(self)

    def get_range(self):
        return _PyNEC.nec_radiation_pattern_get_range(self)

    def get_gain(self):
        return _PyNEC.nec_radiation_pattern_get_gain(self)

    def get_gain_vert(self):
        return _PyNEC.nec_radiation_pattern_get_gain_vert(self)

    def get_gain_horiz(self):
        return _PyNEC.nec_radiation_pattern_get_gain_horiz(self)

    def get_gain_tot(self):
        return _PyNEC.nec_radiation_pattern_get_gain_tot(self)

    def get_pol_axial_ratio(self):
        return _PyNEC.nec_radiation_pattern_get_pol_axial_ratio(self)

    def get_pol_tilt(self):
        return _PyNEC.nec_radiation_pattern_get_pol_tilt(self)

    def get_pol_sense_index(self):
        return _PyNEC.nec_radiation_pattern_get_pol_sense_index(self)

    def get_e_theta(self):
        return _PyNEC.nec_radiation_pattern_get_e_theta(self)

    def get_e_phi(self):
        return _PyNEC.nec_radiation_pattern_get_e_phi(self)

    def get_e_r(self):
        return _PyNEC.nec_radiation_pattern_get_e_r(self)

    def get_normalization_factor(self):
        return _PyNEC.nec_radiation_pattern_get_normalization_factor(self)

    def get_theta_angles(self):
        return _PyNEC.nec_radiation_pattern_get_theta_angles(self)

    def get_delta_theta(self):
        return _PyNEC.nec_radiation_pattern_get_delta_theta(self)

    def get_theta_start(self):
        return _PyNEC.nec_radiation_pattern_get_theta_start(self)

    def get_phi_angles(self):
        return _PyNEC.nec_radiation_pattern_get_phi_angles(self)

    def get_delta_phi(self):
        return _PyNEC.nec_radiation_pattern_get_delta_phi(self)

    def get_phi_start(self):
        return _PyNEC.nec_radiation_pattern_get_phi_start(self)

    def get_ntheta(self):
        return _PyNEC.nec_radiation_pattern_get_ntheta(self)

    def get_nphi(self):
        return _PyNEC.nec_radiation_pattern_get_nphi(self)

    def get_average_power_gain(self):
        return _PyNEC.nec_radiation_pattern_get_average_power_gain(self)

    def get_average_power_solid_angle(self):
        return _PyNEC.nec_radiation_pattern_get_average_power_solid_angle(self)

    def get_ifar(self):
        return _PyNEC.nec_radiation_pattern_get_ifar(self)

    def get_rp_normalization(self):
        return _PyNEC.nec_radiation_pattern_get_rp_normalization(self)

    def get_rp_output_format(self):
        return _PyNEC.nec_radiation_pattern_get_rp_output_format(self)

    def get_rp_power_average(self):
        return _PyNEC.nec_radiation_pattern_get_rp_power_average(self)

    def get_rp_ipd(self):
        return _PyNEC.nec_radiation_pattern_get_rp_ipd(self)
nec_radiation_pattern_swigregister = _PyNEC.nec_radiation_pattern_swigregister
nec_radiation_pattern_swigregister(nec_radiation_pattern)

class nec_norm_rx_pattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_norm_rx_pattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_norm_rx_pattern, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_frequency(self):
        return _PyNEC.nec_norm_rx_pattern_get_frequency(self)

    def get_n_theta(self):
        return _PyNEC.nec_norm_rx_pattern_get_n_theta(self)

    def get_n_phi(self):
        return _PyNEC.nec_norm_rx_pattern_get_n_phi(self)

    def get_theta_start(self):
        return _PyNEC.nec_norm_rx_pattern_get_theta_start(self)

    def get_phi_start(self):
        return _PyNEC.nec_norm_rx_pattern_get_phi_start(self)

    def get_delta_theta(self):
        return _PyNEC.nec_norm_rx_pattern_get_delta_theta(self)

    def get_delta_phi(self):
        return _PyNEC.nec_norm_rx_pattern_get_delta_phi(self)

    def get_eta(self):
        return _PyNEC.nec_norm_rx_pattern_get_eta(self)

    def get_axial_ratio(self):
        return _PyNEC.nec_norm_rx_pattern_get_axial_ratio(self)

    def get_segment_number(self):
        return _PyNEC.nec_norm_rx_pattern_get_segment_number(self)

    def get_type(self):
        return _PyNEC.nec_norm_rx_pattern_get_type(self)

    def get_norm_factor(self):
        return _PyNEC.nec_norm_rx_pattern_get_norm_factor(self)

    def get_mag(self):
        return _PyNEC.nec_norm_rx_pattern_get_mag(self)
nec_norm_rx_pattern_swigregister = _PyNEC.nec_norm_rx_pattern_swigregister
nec_norm_rx_pattern_swigregister(nec_norm_rx_pattern)

class nec_structure_excitation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_structure_excitation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_structure_excitation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_frequency(self):
        return _PyNEC.nec_structure_excitation_get_frequency(self)

    def get_tag(self):
        return _PyNEC.nec_structure_excitation_get_tag(self)

    def get_segment(self):
        return _PyNEC.nec_structure_excitation_get_segment(self)

    def get_current(self):
        return _PyNEC.nec_structure_excitation_get_current(self)

    def get_voltage(self):
        return _PyNEC.nec_structure_excitation_get_voltage(self)

    def get_power(self):
        return _PyNEC.nec_structure_excitation_get_power(self)
nec_structure_excitation_swigregister = _PyNEC.nec_structure_excitation_swigregister
nec_structure_excitation_swigregister(nec_structure_excitation)

class nec_antenna_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_antenna_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_antenna_input, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_frequency(self):
        return _PyNEC.nec_antenna_input_get_frequency(self)

    def get_tag(self):
        return _PyNEC.nec_antenna_input_get_tag(self)

    def get_segment(self):
        return _PyNEC.nec_antenna_input_get_segment(self)

    def get_current(self):
        return _PyNEC.nec_antenna_input_get_current(self)

    def get_voltage(self):
        return _PyNEC.nec_antenna_input_get_voltage(self)

    def get_power(self):
        return _PyNEC.nec_antenna_input_get_power(self)

    def get_impedance(self):
        return _PyNEC.nec_antenna_input_get_impedance(self)
nec_antenna_input_swigregister = _PyNEC.nec_antenna_input_swigregister
nec_antenna_input_swigregister(nec_antenna_input)

class nec_near_field_pattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_near_field_pattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_near_field_pattern, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_frequency(self):
        return _PyNEC.nec_near_field_pattern_get_frequency(self)

    def get_nfeh(self):
        return _PyNEC.nec_near_field_pattern_get_nfeh(self)

    def get_x(self):
        return _PyNEC.nec_near_field_pattern_get_x(self)

    def get_y(self):
        return _PyNEC.nec_near_field_pattern_get_y(self)

    def get_z(self):
        return _PyNEC.nec_near_field_pattern_get_z(self)

    def get_field_x(self):
        return _PyNEC.nec_near_field_pattern_get_field_x(self)

    def get_field_y(self):
        return _PyNEC.nec_near_field_pattern_get_field_y(self)

    def get_field_z(self):
        return _PyNEC.nec_near_field_pattern_get_field_z(self)
nec_near_field_pattern_swigregister = _PyNEC.nec_near_field_pattern_swigregister
nec_near_field_pattern_swigregister(nec_near_field_pattern)

class nec_structure_currents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_structure_currents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_structure_currents, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_frequency(self):
        return _PyNEC.nec_structure_currents_get_frequency(self)

    def get_iptflg(self):
        return _PyNEC.nec_structure_currents_get_iptflg(self)

    def get_iptflq(self):
        return _PyNEC.nec_structure_currents_get_iptflq(self)

    def get_n(self):
        return _PyNEC.nec_structure_currents_get_n(self)

    def get_m(self):
        return _PyNEC.nec_structure_currents_get_m(self)

    def get_current_segment_number(self):
        return _PyNEC.nec_structure_currents_get_current_segment_number(self)

    def get_current_segment_tag(self):
        return _PyNEC.nec_structure_currents_get_current_segment_tag(self)

    def get_current_segment_center_x(self):
        return _PyNEC.nec_structure_currents_get_current_segment_center_x(self)

    def get_current_segment_center_y(self):
        return _PyNEC.nec_structure_currents_get_current_segment_center_y(self)

    def get_current_segment_center_z(self):
        return _PyNEC.nec_structure_currents_get_current_segment_center_z(self)

    def get_current_segment_length(self):
        return _PyNEC.nec_structure_currents_get_current_segment_length(self)

    def get_current_theta(self):
        return _PyNEC.nec_structure_currents_get_current_theta(self)

    def get_current_phi(self):
        return _PyNEC.nec_structure_currents_get_current_phi(self)

    def get_current(self):
        return _PyNEC.nec_structure_currents_get_current(self)

    def get_q_density_segment_number(self):
        return _PyNEC.nec_structure_currents_get_q_density_segment_number(self)

    def get_q_density_segment_tag(self):
        return _PyNEC.nec_structure_currents_get_q_density_segment_tag(self)

    def get_q_density_segment_center_x(self):
        return _PyNEC.nec_structure_currents_get_q_density_segment_center_x(self)

    def get_q_density_segment_center_y(self):
        return _PyNEC.nec_structure_currents_get_q_density_segment_center_y(self)

    def get_q_density_segment_center_z(self):
        return _PyNEC.nec_structure_currents_get_q_density_segment_center_z(self)

    def get_q_density_segment_length(self):
        return _PyNEC.nec_structure_currents_get_q_density_segment_length(self)

    def get_q_density(self):
        return _PyNEC.nec_structure_currents_get_q_density(self)

    def get_patch_number(self):
        return _PyNEC.nec_structure_currents_get_patch_number(self)

    def get_patch_center_x(self):
        return _PyNEC.nec_structure_currents_get_patch_center_x(self)

    def get_patch_center_y(self):
        return _PyNEC.nec_structure_currents_get_patch_center_y(self)

    def get_patch_center_z(self):
        return _PyNEC.nec_structure_currents_get_patch_center_z(self)

    def get_patch_tangent_vector1(self):
        return _PyNEC.nec_structure_currents_get_patch_tangent_vector1(self)

    def get_patch_tangent_vector2(self):
        return _PyNEC.nec_structure_currents_get_patch_tangent_vector2(self)

    def get_patch_e_x(self):
        return _PyNEC.nec_structure_currents_get_patch_e_x(self)

    def get_patch_e_y(self):
        return _PyNEC.nec_structure_currents_get_patch_e_y(self)

    def get_patch_e_z(self):
        return _PyNEC.nec_structure_currents_get_patch_e_z(self)
nec_structure_currents_swigregister = _PyNEC.nec_structure_currents_swigregister
nec_structure_currents_swigregister(nec_structure_currents)

class nec_ground(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec_ground, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec_ground, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_relative_dielectric_constant(self):
        return _PyNEC.nec_ground_get_relative_dielectric_constant(self)

    def get_conductivity(self):
        return _PyNEC.nec_ground_get_conductivity(self)

    def get_radial_wire_count(self):
        return _PyNEC.nec_ground_get_radial_wire_count(self)

    def get_radial_wire_length(self):
        return _PyNEC.nec_ground_get_radial_wire_length(self)

    def get_radial_wire_radius(self):
        return _PyNEC.nec_ground_get_radial_wire_radius(self)

    def get_cliff_edge_distance(self):
        return _PyNEC.nec_ground_get_cliff_edge_distance(self)

    def get_cliff_height(self):
        return _PyNEC.nec_ground_get_cliff_height(self)

    def get_relative_dielectric_constant2(self):
        return _PyNEC.nec_ground_get_relative_dielectric_constant2(self)

    def get_conductivity2(self):
        return _PyNEC.nec_ground_get_conductivity2(self)
nec_ground_swigregister = _PyNEC.nec_ground_swigregister
nec_ground_swigregister(nec_ground)

# This file is compatible with both classic and new-style classes.


